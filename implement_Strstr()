# Brute Force
# Time: O(M * N) or O(M * (M-N))
# Space: O(1)


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if(len(needle) == 0):
            return 0
        m = len(haystack)
        n = len(needle)
        i = 0
        while(i < m):
            if(needle[0] == haystack[i]):
                temp = i
                j = 0 # start of needle

                while(temp < m and needle[j] == haystack[temp]):
                    temp += 1
                    j += 1
                    if(j == n):
                        return i
            i += 1

        return -1
        
# KMP Algorithm
# Time Complexity:    O(m+n) where m is size of needle and n is size of haystack
# Space Complexity:   O(n) for lps

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        m = len(haystack)
        n = len(needle)
        lps = self.lps(needle)
        if m < n:
            return -1
        i = 0
        j = 0
        while i < m:
            if haystack[i] == needle[j]:
                i += 1
                j += 1
                if j == n:
                    return i-j
            else:
                if j == 0:
                    i += 1
                else:
                    j = lps[j-1]
        return -1

    def lps(self, needle):
        j = 0
        i = 1
        lps = [0]*len(needle)
        while i < len(needle):
            if needle[i] == needle[j]:
                j += 1
                lps[i] = j
                i += 1
            elif j > 0 and needle[i] != needle[j]:
                j = lps[j-1]
            elif j == 0 and needle[i] != needle[j]:
                lps[i] = 0
                i += 1
        return lps
