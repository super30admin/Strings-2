class Solution {
    public int strStr(String haystack, String needle) {
        // haystack = 
        // needle = 
        // LPS = []
        if(needle.length() == 0){
            return 0;
        }
        int LPS[] = calc_lps(needle);
        int i = 0;
        int j = 0;
        
        while(i < haystack.length()){
            
            char ch_i = haystack.charAt(i);
            char ch_j = needle.charAt(j);
            
            //case 1 if same char
            if(ch_i == ch_j){
                i += 1;
                j += 1;
            }
            
            if(j == needle.length()){
                return i - j;
            }
            
            //case 2 not the same char midway so we dont need to recheck for the matched characters before. it also discards unwated string from haystack e.g (initial aa)
            else if(j > 0 && ch_i != ch_j){
                j = LPS[j - 1];
            }
            
            else if( j==0 && ch_i != ch_j){
                i += 1;
            }
        }
        return -1;
    }
    
    private int[] calc_lps(String needle){
        int i = 1;
        int j = 0;
        
        int LPS[] = new int[needle.length()];
        
        //first element lps will always be 0
        LPS[0] = 0;
        
        while(i < needle.length()){
            char ch_i = needle.charAt(i);
            char ch_j = needle.charAt(j);
            
            if(ch_i == ch_j){
                j += 1;
                LPS[i] = j;
                i += 1;
            }
            
            else if(j > 0 && ch_i != ch_j){
                j = LPS[j - 1];
            }
            
            else if(j == 0 && ch_i != ch_j){
                LPS[i] = 0;
                i += 1;
            }
        }
        
        return LPS;
    }
}
