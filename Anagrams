//Timecomlpexity. O(m+n). m is the length of s
//SpaceComplexity. O(n) n  is the length of p

class Solution{
    public List<Integer> findAnagrams(String s, String p){

        HashMap<Character,Integer> map = new HashMap<>();
        List<Integer> result = new ArrayList<>();
        int start = 0;
        int end = 0;
        int n = s.length();

        if(n < p.length())return result;

        int count = 0;
        for(int i = 0 ; i < p.length(); i++){
            char ch = p.charAt(i);
            map.put(ch,map.getOrDefault(ch,0)+1);
        }

        while(end < n){
            char ch = s.charAt(end);

            //incoming element check
            if(map.containsKey(ch)){
                map.put(ch,map.get(ch)-1);
                if(map.get(ch) == 0)count++;                             
            }
           
           //if anagram is found
            if(count == map.size()){
               result.add(start);               
            }
            
            //outgoing element check
            if(end-start+1 == p.length()){
            if(map.containsKey(s.charAt(start))){
                map.put(s.charAt(start),map.get(s.charAt(start))+1);
                if(map.get(s.charAt(start)) == 1)count--;
            }
             start++;
            }
            end++;
            }   
        return result;
    }
}
