// Time Complexity :linear S.length + T.length
// Space Complexity :T.length
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
how to get the remaining values

// Your code here along with comments explaining your approach
class Solution {
    public String customSortString(String S, String T) {
        
        if(S == null || S.length() == 0)
            return T;
        
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(int i=0; i<T.length(); i++)
        {
            char c = T.charAt(i);
            map.put(c,map.getOrDefault(c,0)+1);
            
        }
        
        StringBuilder sb = new StringBuilder();
        for(int i=0; i<S.length(); i++)
        {
            char c = S.charAt(i);
            int count = map.containsKey(c)? map.get(c):0;

            while(count >0)
            {
                sb.append(c);
                count--;
            }
            map.remove(c); 
        }
        
        for(Character c : map.keySet())
        {
            int count =  map.get(c);
            while(count>0)
            {
                sb.append(c);
                count--;
            }
        }
     
        return sb.toString();
    }
}
