/**
Time Complexity - O(n+m)
Space Complexity - O(1)
 */
import java.math.BigInteger;

class Solution {
    public int strStr(String haystack, String needle) {
            int m = needle.length();
        int n = haystack.length();
        if (m > n ) {
            return -1;
        }
        BigInteger targetHash = BigInteger.ZERO;
        BigInteger setSize = BigInteger.valueOf(26);

        for(int i=0; i< needle.length(); i++) {
            char c = needle.charAt(i);
            targetHash = targetHash.multiply(setSize).add(BigInteger.valueOf(c - 'a' +1));
        }
        System.out.println(targetHash);
        //BigInteger outgoingContribution = BigInteger.valueOf(26).pow(m);
        BigInteger currHash = BigInteger.ZERO;
        for (int i=0; i<n; i++) {

            char in = haystack.charAt(i);
            currHash = currHash.multiply(setSize).add(BigInteger.valueOf(in -'a' + 1));
            if (i >= m) {
                char out = haystack.charAt(i -m);
                currHash.subtract(BigInteger.valueOf(out - 'a' +1));
                currHash = currHash.mod(setSize.pow(m));
            }
            System.out.println(currHash);
            if (currHash.equals(targetHash)) {
                return i - m + 1;
            }
        }
        return -1;
    }
}
