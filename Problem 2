#Find All Anagrams in a String

Time Complexity (TC): O(s_len)
Space Complexity (SC): O(1)


from collections import Counter

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        # Initialize variables
        result = []
        p_len = len(p)
        s_len = len(s)
        
        # Edge cases
        if s_len < p_len:
            return result
        
        # Create frequency counters for both strings
        p_counter = Counter(p)
        s_counter = Counter(s[:p_len])
        
        # Compare frequency counters
        if p_counter == s_counter:
            result.append(0)
        
        # Sliding window approach
        for i in range(1, s_len - p_len + 1):
            # Remove the leftmost character from the window
            if s_counter[s[i - 1]] == 1:
                del s_counter[s[i - 1]]
            else:
                s_counter[s[i - 1]] -= 1
            
            # Add the rightmost character to the window
            if s_counter[s[i + p_len - 1]] == 0:
                del s_counter[s[i + p_len - 1]]
            s_counter[s[i + p_len - 1]] += 1
            
            # Check if the frequency counters match
            if p_counter == s_counter:
                result.append(i)
        
        return result
