Time complexity: O(n) -> length of S
Space complexity: O(1)
Did this code successfully submitted on leetcode: Yes

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ans = new ArrayList<>();
        int s_arr[] = new int[26];
        int p_arr[] = new int[26];
        
        for(char c : p.toCharArray()){
            p_arr[c - 'a']++;
            //System.out.println(c);
        }
        
        int start = 0, end = 0;
        
        
        
        while(end<s.length()){
            int size = end - start + 1;
            
            if(size<p.length()){
                s_arr[s.charAt(end)-'a']++;
                end++;
            }else if(size == p.length()){
                s_arr[s.charAt(end)-'a']++;
                if(compare(p_arr, s_arr))
                    ans.add(start);
                end++;  
            }else{
                s_arr[s.charAt(start)-'a']--;
                start++;
            }
        }
        
        return ans;
    }
    
    private boolean compare(int[] p, int[] q){
        
        for(int i=0; i<26; i++){
            if(p[i]!=q[i])
                return false;
        }
        return true;
    }
}
