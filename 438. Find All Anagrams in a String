from collections import defaultdict
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        # initialize dict1 for storing the frequency of characters in p
        dict1 = defaultdict(int)
        for char in p:
            dict1[char] += 1;
        
        k = len(p);
        # initialize dict2 for storing the frequency of characters in S of subset of length k
        dict2 = defaultdict(int)
        
        result= []
        if(len(s) < len(p)):
            return []
        for i in range(k):
            dict2[s[i]] += 1;
        if(dict2 == dict1):
            result.append(0);
            
        for i in range(k, len(s)):
            # add the curret character into the segment and slide the window
            dict1[s[i]] += 1;
            # decrease the frequency of the character at index i - k from the segment 
            dict1[s[i-k]] -= 1;
            # remove the element if the frequency of the character is 0
            if(dict1[s[i-k]] == 0):
                dict1.pop(s[i-k]);
            # add the new anagram start index into reuslt if both the dicionaries are equal
            if(dict1 == dict2):
                result.append(i - k + 1);
        return result;
         
        '''
        n = length of the string s
        c = constant (26 chars)
        time complexity = O(nc);
        space complexity = O(c)
        '''
            
            
        
