class Solution {
    int m,n;
    public int strStr(String haystack, String needle) {
        
        //28. Implement strStr()
        //Time complexity : O(m+n) where m is the length of haystack and n is the length of needle
        //Space compelxity : O(n)
        
        if(needle.length() ==0)
            return 0;
         m = haystack.length();
         n = needle.length();
        int lps[] =lps(needle);
        int i = 0;      //index of haysatck
        int j =0;       //index of needle
        while(i < m){
            if(haystack.charAt(i) == needle.charAt(j)){
                j++;
                i++;
                if(j == n){
                    return i-n;
                }
            }
            else if(haystack.charAt(i) != needle.charAt(j) && j>0){
                j = lps[j-1];
            }
            else if(haystack.charAt(i) != needle.charAt(j) && j==0)
                i++;
        }
        return -1;
    }
    
    private int[] lps(String needle){
        int[] lps = new int[needle.length()];
        lps[0]=0;
        int i =1;
        int j=0;
        while(i < n){
            if(needle.charAt(i)==needle.charAt(j)){
                j++;
                lps[i] = j;
                i++;
            }
            else if(needle.charAt(i) != needle.charAt(j) && j>0){
                j = lps[j-1];
            }
            else if(needle.charAt(i) != needle.charAt(j) && j==0){
                lps[i] =0;
                i++;
            }
        }
        return lps;
    }
}