// Time Complexity : O(n) linear or length of the string
// Space Complexity : O(1) constant coz small character max of 26
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        if(s == null || s.length() == 0)
            return 0;
        
        //initialize
        int max =0;

        HashMap<Character, Integer> map = new HashMap<>();
        int slow =0;
        
        for(int i=0; i<s.length(); i++)
        {
            char c = s.charAt(i);
            if(map.containsKey(c))
            {
                slow = Math.max(slow, map.get(c));
            }
            map.put(c, i+1);
            max = Math.max(max, i-slow+1);

        }
        return max;
    }
}
