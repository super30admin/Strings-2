//TC - o(m+n)
//SC - o(1) map can have any 26 characters
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        
        List<Integer> result = new ArrayList<>();
        //if s is empty return empty result
        if( s == null || s.length() == 0)
            return result;
        
        HashMap<Character,Integer> map= new HashMap<>();
        for(int i=0;i<p.length();i++){
            char c = p.charAt(i);
            map.put(c,map.getOrDefault(c,0)+1);
        }
        int match = 0;
        for(int i=0;i<s.length();i++){
            char in = s.charAt(i);
            if(map.containsKey(in)){
                int count = map.get(in);
                count--;
                //we have the number of character needed for that specific in
                //increase the match
                if(count == 0)
                    match++;
                map.put(in,count);
            }
            //after first p length characters there will be always one character we will be removing
            //i start with zero thats why equal to
            if(i>= p.length()){
                char out = s.charAt(i-p.length());
                if(map.containsKey(out)){
                    int count = map.get(out);
                    count++;
                    //means we need one character to complete the string
                    //reduce the match
                    if(count == 1)
                        match--;
                    map.put(out,count);
                }
            }
            //if match and map size is same we found anagram
            //add to the result
            if(match == map.size()){
                result.add(i-p.length()+1);
            }
        }
        return result;
    }
}