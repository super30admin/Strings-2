//BruteForce-
//TC - o(mn)
//SC - o(1)
class Solution {
    public int strStr(String haystack, String needle) {
        
        //edge case
        if(needle == null || needle.length() == 0)
            return 0;
        
        int h = haystack.length();
        int n = needle.length();
        
        for(int i = 0;i<h-n+1;i++) {
            //if first character of the both the string match check other characters
            if(haystack.charAt(i) == needle.charAt(0)) {
                //start comparing from the ith pointer
                int j = i;
                int m =0;
                //if j and m are less thn respective lengths keep comparing
                while(j<h && m<n && haystack.charAt(j) == needle.charAt(m)) {
                    //inc both the pointers
                    j++;
                    m++;
                    //as as soon we compare both the string till end return the start index
                    if(m == n)
                        return i;
                }
            }
        }
        return -1;
    }
}

//LPS

//TC - o(m) m is hystack length
//SC - o(n) n is needle length - lps array
class Solution {
    public int strStr(String haystack, String needle) {
        
        //edge case
        if(needle == null || needle.length() == 0)
            return 0;
        
        int [] lps = longestPreSuf(needle);
        int i=0,j=0;
        
        while(i< haystack.length()) {
            //if equal keep incrementing i and j
            if(haystack.charAt(i) == needle.charAt(j)){
                i++; j++;
                if(j == needle.length()){
                    return i-j;
                }
            }
            //not equal and j is not at first index move to lps[j-1]
            else if(j > 0 && haystack.charAt(i) != needle.charAt(j)) {
                j = lps[j-1];
            }
            //just increase i pointer 
            //means no match until now
            else if(j ==0 && haystack.charAt(i) != needle.charAt(j)) {
                i++;
            }
        }
        
        return -1;
    }
    
    private int[] longestPreSuf (String needle){
        
        int [] lps = new int [needle.length()];
        //lps for first index is zero
        lps[0] =0;
        //start calculating from 2nd index
        //i will be always increasing
        int i =1, j=0;
        
        //find lps until we are out of bound
        while(i< needle.length()){
            //if both are equal
            //increment j means keep inc the prefix window , assign it to  lps of i and increase i
            if(needle.charAt(i) == needle.charAt(j)){
                j++;
                lps[i] = j;
                i++;
            } 
            //if both not equal and j is grater thn zero 
            // go back to lps[j-1] index
            else if(j>0 && needle.charAt(i) != needle.charAt(j)) {
                j = lps[j-1];
            } 
            //if j is at zero means no common pre -suf 
            //assign zero lps[i] and increase i
            else if (j ==0 && needle.charAt(i) != needle.charAt(j)) {
                lps[i] =0;
                i++;
            }
        }
        return lps;
    }
}